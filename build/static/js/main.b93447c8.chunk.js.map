{"version":3,"sources":["Redux/Store.js","Redux/darkMode.js","Components/Header/index.js","Components/Dropdown/index.js","Components/Input/index.js","Components/Card/index.js","Components/Home/index.js","Components/Country/index.js","serviceWorker.js","index.js"],"names":["persistConfig","key","storage","stateReconciler","autoMergeLevel1","persistedReducer","persistReducer","state","action","console","log","type","darkMode","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","connect","ownProps","dispatch","handleDarkMode","props","className","onClick","aria-hidden","Dropdown","show","handleClickOutside","event","wrapperRef","current","contains","target","setState","handleClickInside","e","setCountinent","generateList","map","i","render","ref","default","React","createRef","document","addEventListener","this","removeEventListener","Component","placeholder","onChange","handleSearch","value","cValue","name","flag","population","region","capital","to","src","alt","QueryList","gql","useState","setRegion","search","setSearch","cQuery","setCQuery","handleSetCountinent","text","useQuery","variables","loading","error","data","JSON","stringify","CountryList","countries","countriesSearch","countriesByRegion","lenght","GET_BY_COUNTRY","withRouter","history","useHistory","countryName","useParams","handleRedirectToHome","push","element","background","country","nativeName","subregion","topLevelDomain","borders","languages","length","join","currencies","code","Helmet","Boolean","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","exact","path","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b93447c8.chunk.js","sourcesContent":["import { createStore } from \"redux\";\nimport { HandleDarkReducer } from \"./darkMode\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport autoMergeLevel1 from 'redux-persist/lib/stateReconciler/autoMergeLevel1';\nconst persistConfig = {\n    key: 'root',\n    storage,\n    stateReconciler: autoMergeLevel1\n  }\n  \nconst persistedReducer = persistReducer(persistConfig, HandleDarkReducer)\nlet store = createStore(persistedReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\nlet persistor = persistStore(store)\nexport  {store,persistor};\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\n\nimport {createStore} from \"redux\";\nimport {handleUserReducer} from \"./user.js\";\n\n\n\nconst store = createStore(handleUserReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nexport default store;\n\n\n\n\n*/","const TOOGLE_MODE = () =>( { type : \"TOOGLE_MODE\" } );\n\nconst HandleDarkReducer = ( state = {\"darkMode\":false} , action ) =>{\n    console.log(action , state)\n    switch(action.type){\n        case \"TOOGLE_MODE\":\n            return {\"darkMode\":!state.darkMode};\n        default : \n            return state;\n    }\n}\n\nexport {TOOGLE_MODE, HandleDarkReducer};","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {TOOGLE_MODE} from \"../../Redux/darkMode\";\n\nimport \"./Header.scss\";\n\nconst Header = (props) =>(\n    <div className={props.darkMode?\"cHeader darkElement\":\"cHeader lightElement\"}>\n        <h3>Where in the world?</h3>\n        <button \n            className={\"cDarkMode\"} \n            onClick={()=>props.handleDarkMode()}>\n            <i className=\"fa fa-moon-o\" aria-hidden=\"true\"></i>\n            Dark Mode\n        </button>\n    </div>\n)\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        ...state, ...ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        handleDarkMode: () => {\n            dispatch(TOOGLE_MODE())\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Header);","import React, { Component } from 'react';\nimport {connect} from \"react-redux\"\n\nimport \"./Dropdown.scss\";\n\nclass Dropdown extends Component {\n    \n    state={\n        show:false\n    }\n    constructor(props) {\n        super(props);\n\n        this.wrapperRef = React.createRef();\n    }\n\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    \n    handleClickOutside=(event)=> {\n        if (this.wrapperRef && !this.wrapperRef.current.contains(event.target)) {\n            if(this.state.show)\n                this.setState({show:!this.state.show})\n        }\n    }\n\n    handleClickInside=(e)=>{\n        this.props.setCountinent(e)\n        this.setState({\n            show : false\n        })\n    }\n\n    generateList=()=>{\n        const list = [\"Africa\",\"Americas\",\"Asia\",\"Europe\",\"Oceania\"]\n        return list.map((e,i)=>(<li key={i}  onClick={()=>this.handleClickInside(e)}>{e}</li>))\n    }\n\n    render=()=> (\n        <div \n        className={this.props.darkMode?\"cDropdown darkElement\":\"cDropdown lightElement\"}\n        ref={this.wrapperRef}>\n            <div className={\"head\"}\n            onClick={()=>this.setState({show:!this.state.show})}\n            >\n                {this.props.default!==\"\" ? this.props.default : \"Filter by Region\"}\n                <i \n                className=\"fa fa-angle-down\" \n                aria-hidden=\"true\">\n                </i>\n            </div>\n            <ul className={this.state.show?\"cVisible\":\"\"}>\n                {this.generateList()}\n            </ul>\n        </div>\n        )\n}\n\nconst  mapStateToProps = (state, ownProps) => {\n    return {...state,...ownProps}\n    \n}\n\n\nexport default connect(mapStateToProps,null)(Dropdown)","import React from \"react\";\nimport {connect} from \"react-redux\";\n\nimport \"./Input.scss\";\n\nconst Input = (props) =>(\n    <div className={props.darkMode?\"cInput darkElement\":\"cInput lightInputElement\"}>\n        <i \n            className=\"fa fa-search\" \n            aria-hidden=\"true\">\n        </i>\n        <input \n            type={\"text\"}\n            placeholder={\"Search for a country...\"}\n            onChange={(e)=>props.handleSearch(e.target.value)}\n            value={props.cValue}\n            >\n        </input>\n    </div>\n);\n\nconst mapStateToProps=(state,ownProps)=>{\n    return{...state,...ownProps}\n}\n\nexport default connect(mapStateToProps,null)(Input);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./card.scss\";\n\nconst Card = (props) =>{\n    const {\n        darkMode , name, flag, population, region, capital\n    } = props\n    return (\n    <div className={darkMode ?\"darkElement cCard\":\"lightElement cCard\"}>\n        <Link to={`/country/${name}`}>\n            <img src={flag} alt={\"\"}></img>\n            <h3>{name}</h3>\n            <p>Population: {population}</p>\n            <p>Region: {region}</p>\n            <p>Capital: {capital}</p>\n        </Link>\n    </div>\n) \n}\nconst mapStateToProps = (state, ownProps) => {\n    return  {...state,...ownProps}\n    \n}\n\nexport default connect(mapStateToProps, null)(Card)\n","import React, { useState } from 'react';\nimport {connect} from \"react-redux\";\nimport { gql, useQuery } from '@apollo/client';\nimport DropDown from \"../Dropdown\";\nimport Input from \"../Input\";\nimport Card from \"../Card\";\n\nimport \"./Home.scss\";\n\n const Home = (props) => {\n   const QueryList = [gql`\n    query RootQuerry{ \n        countries{\n        name\n        population\n        region\n        capital\n        flag\n    }}`,\n    gql`query RootQuerry($name:String){ \n        countriesSearch(name: $name){\n            name\n            population\n            region\n            capital\n            flag\n        }}`,\n    gql`query RootQuerry($name:String){ \n        countriesByRegion(name: $name){\n            name\n            population\n            region\n            capital\n            flag\n        }}`\n]\n    const [region ,setRegion] = useState(\"\");\n    const [search ,setSearch] = useState(\"\");\n    const [cQuery ,setCQuery] = useState(0);\n\n\n   const handleSetCountinent=(text)=>{\n        setRegion(text)\n        setCQuery(2)\n        setSearch(\"\")  \n    }\n\n    const handleSearch=(text)=>{\n        if(text===\"\"){\n            setRegion(\"\")\n            setCQuery(0)\n            setSearch(\"\") \n        }\n        else{\n            setRegion(\"\")\n            setCQuery(1)\n            setSearch(text) \n        }\n    }\n    const { loading, error, data } = useQuery(QueryList[cQuery],{variables:{name:cQuery==1? search : region }})\n    \n        if (loading) return <div className={props.darkMode? \"cHome darkBackground\":\"cHome lightBackground\"}>\n                    <div className={\"cTop\"}>\n                        <Input handleSearch={handleSearch} cValue={search}/>\n                        <DropDown default={region} setCountinent={handleSetCountinent}/>\n                    </div><h4>Loading...</h4>\n                </div>;\n        if (error) {\n            console.log(JSON.stringify(error, null, 3))\n            return <div className={props.darkMode? \"cHome darkBackground\":\"cHome lightBackground\"}>\n                        <div className={\"cTop\"}>\n                            <Input handleSearch={handleSearch} cValue={search}/>\n                            <DropDown default={region} setCountinent={handleSetCountinent}/>\n                        </div><h4>Error...</h4>\n                    </div>;\n        }\n        else{\n            let CountryList=[]\n            if(data.countries)\n                CountryList = data.countries \n            else if(data.countriesSearch) \n                CountryList = data.countriesSearch\n            else CountryList = data.countriesByRegion\n            return (\n                <div className={props.darkMode? \"cHome darkBackground\":\"cHome lightBackground\"}>\n                    <div className={\"cTop\"}>\n                        <Input handleSearch={handleSearch} cValue={search}/>\n                        <DropDown default={region} setCountinent={handleSetCountinent}/>\n                    </div>\n                    <div className={\"cBody\"}>\n                        {CountryList.lenght === 0 ? \"\" : CountryList.map(e=>(\n                            <Card capital={e.capital} flag={e.flag} population={e.population} name={e.name} region={e.region} />\n                        ))}\n                    </div>\n                </div> \n        \n            )\n        }\n}\n \nconst  mapStateToProps = (state, ownProps) => {\n    return {\n        ...state,...ownProps\n    }\n}\n\nexport default connect(mapStateToProps,null)(Home);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter ,Link, useHistory, useParams } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\n\nimport \"./Country.scss\";\nimport { Helmet } from 'react-helmet';\n\nconst GET_BY_COUNTRY = gql `\n    query RootQuerry($name:String){\n        country(name:$name){\n            name\n            flag\n            nativeName\n            subregion\n            population\n            region\n            capital\n            topLevelDomain\n            languages{\n                name\n              }\n              currencies{\n                code\n              }\n            borders\n        }\n    }\n    `\n\nconst Country = (props) => {\n    const history = useHistory()\n    const countryName = useParams() \n\n    const handleRedirectToHome = () =>{\n        history.push(\"/\");\n    }\n\n        const element = props.darkMode? \"darkElement\" : \"lightElement\";\n        const background = props.darkMode? \"darkBackground\" : \"lightBackground\";\n        \n        const { loading, error, data } = useQuery(GET_BY_COUNTRY,{variables:countryName});\n\n        if (loading) return <div className={\"cCountry \"+background}>\n                                <button className={element} onClick={handleRedirectToHome}>\n                                    <i className={\"fa fa-long-arrow-left\"} aria-hidden=\"true\"></i>\n                                    Back\n                                </button>\n                                <p>Loading...</p>\n                            </div>;\n        if (error) {\n            console.log(JSON.stringify(error,null,2))\n            return <div className={\"cCountry \"+background}>\n                        <button className={element} onClick={handleRedirectToHome}>\n                            <i className={\"fa fa-long-arrow-left\"} aria-hidden=\"true\"></i>\n                            Back\n                        </button>\n                        <p>Error...</p>\n                    </div>\n        }\n            else{\n                const { name , flag , nativeName, subregion, \n                    population, region, capital, \n                    topLevelDomain, borders } = data.country\n                const languages =  data.country.languages.length===0 ? \"\" : data.country.languages.map(e=>(e.name)).join(\", \");\n                const currencies =  data.country.currencies.length===0 ? \"\" : data.country.currencies.map(e=>(e.code)).join(\", \")\n                return(\n                    <div className={\"cCountry \"+background}>\n                        <Helmet>\n                        <title>{ name } details</title>\n                        </Helmet>\n                <button className={element} onClick={handleRedirectToHome}>\n                    <i className={\"fa fa-long-arrow-left\"} aria-hidden=\"true\"></i>\n                    Back\n                </button>\n                    <div className={\"grid\"}>\n                        <div className={\"flag\"}>\n                            <img src={flag} alt={`${name} flag`}/>\n                        </div>\n                        <div className={\"title\"}>\n                            <h2>{name}</h2>\n                        </div>\n                        <div className={\"info1\"}>\n                            <ul>\n                                <li><span>NativeName: </span>{nativeName}</li>\n                                <li><span>Population: </span>{population}</li>\n                                <li><span>Region: </span>{region}</li>\n                                <li><span>Subregion: </span>{subregion}</li>\n                                <li><span>Capital: </span>{capital}</li>\n                            </ul>\n                        </div>\n                        <div className={\"info2\"}>\n                            <ul>\n                                <li><span>Top Level Domain: </span>{topLevelDomain}</li>\n                                <li><span>Currencies: </span>{currencies}</li>\n                                <li><span>Languages: </span>{languages}</li>\n                            </ul>\n                        </div>\n                        <div className={\"info3\"}>\n                            <div className={\"info3_1\"}>\n                                Border Countries:\n                            </div>\n                            <div className={\"info3_2\"}>\n                                {\n                                   borders.length===0 ? \"\" : borders.map((e,i)=>(\n                                        <Link to={`/country/${e}`} key={i} className={\"border_item \"+element}>\n                                            {e}\n                                        </Link> ))\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n            \n                                \n                        )\n                    }\n                \n            \n\n         \n}\n \nconst mapStateToProps =(state,ownProps)=>{\n    return {\n        ...state,...ownProps\n    }\n}\nexport default connect(mapStateToProps)(withRouter(Country));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from \"react-redux\";\nimport { store, persistor} from \"./Redux/Store\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Header from './Components/Header';\nimport Home from './Components/Home';\nimport Country from \"./Components/Country\";\nimport * as serviceWorker from './serviceWorker';\n\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-test-country1.herokuapp.com/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <Header/>\n          <Router>\n            <Switch>\n              <Route exact path={\"/\"}>\n                  <Home/>\n              </Route>\n              <Route path={\"/country/:name\"}>\n                <Country/>\n              </Route>\n            </Switch>\n          </Router>\n        </PersistGate>\n      </Provider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}